name: Continuous Delivery

# manual until we disclose whether we can use the GitHub Container Registry
on:
  workflow_dispatch:

jobs:
  publish-init:
    name: Publish init container artifact
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile.init
          push: true
          tags: |
            ghcr.io/ntnu-ie-iir/tidlig-innsats-ungdom-init:latest
            ghcr.io/ntnu-ie-iir/tidlig-innsats-ungdom-init:${{ github.sha }}

  publish-app:
    name: Publish app container artifact
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ghcr.io/ntnu-ie-iir/tidlig-innsats-ungdom-app:latest
            ghcr.io/ntnu-ie-iir/tidlig-innsats-ungdom-app:${{ github.sha }}

  deploy-production:
    name: Deploy to production
    runs-on: ubuntu-latest
    needs: [publish-init, publish-app]
    environment: production
    steps:
      - uses: actions/checkout@v3

      - uses: azure/setup-kubectl@v3

      - uses: azure/k8s-set-context@v3
        with:
          method: service-account
          k8s-url: ${{ vars.K8S_API_URL }}
          k8s-secret: ${{ secrets.K8S_SECRET }}

      - uses: azure/setup-helm@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - run: |
          helm upgrade ${{ vars.K8S_NAMESPACE }} ./helm \
            --kube-insecure-skip-tls-verify \
            --install \
            --namespace ${{ vars.K8S_NAMESPACE }} \
            --set hostname=${{ vars.HOSTNAME }} \
            --set clusterIssuer=${{ vars.K8S_CLUSTER_ISSUER }} \
            --set version=${{ github.sha }} \
            --set s3.endpoint=${{ vars.S3_ENDPOINT }} \
            --set s3.bucket=${{ vars.S3_BUCKET }} \
            --set s3.accessKey=${{ secrets.S3_ACCESS_KEY }} \
            --set s3.secretAccessKey=${{ secrets.S3_SECRET_ACCESS_KEY }}
        shell: bash
